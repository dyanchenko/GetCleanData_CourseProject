cacheSolve(b)
b <- makeCacheMatrix(a)
cacheSolve(b)
a <- matrix(rnorm(25, mean = 50, sd = 10), 5, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
cacheSolve(b)
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
cacheSolve(b)
b <- makeCacheMatrix(a)
cacheSolve(b)
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
a <- matrix(rnorm(25, mean = 50, sd = 10), 5, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(25, mean = 50, sd = 10), 5, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(25, mean = 50, sd = 10), 5, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(25, mean = 50, sd = 10), 5, 5)
cacheSolve(b)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(25, mean = 50, sd = 10), 5, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(25, mean = 50, sd = 10), 5, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
b
cacheSolve(b)
cacheSolve(b)
a <- matrix(rnorm(16, mean = 50, sd = 10), 4, 4)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(16, mean = 50, sd = 10), 4, 4)
b <- makeCacheMatrix(a)
cacheSolve(b)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
a <- matrix(rnorm(16, mean = 50, sd = 10), 4, 4)
b <- makeCacheMatrix(a)
cacheSolve(b)
a <- matrix(rnorm(20, mean = 50, sd = 10), 4, 5)
b <- makeCacheMatrix(a)
cacheSolve(b)
a <- matrix(rnorm(9, mean = 50, sd = 10), 3, 3)
b <- makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
a <- matrix(rnorm(9, mean = 50, sd = 10), 3, 3)
b <- makeCacheMatrix(a)
cacheSolve(b)
c <- matrix(rnorm(9, mean = 50, sd = 10), 3, 3)
d <- makeCacheMatrix(c)
cacheSolve(b)
cacheSolve(d)
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
source('D:/DSToolbox/ProgrammingAssignment2/cachematrix.R')
activity_labels       <- read.table("./UCI HAR Dataset/activity_labels.txt")
features              <- read.table("./UCI HAR Dataset/features.txt")
test_subject       <- read.table("./UCI HAR Dataset/test/subject_test.txt")
test_X             <- read.table("./UCI HAR Dataset/test/X_test.txt")
test_y             <- read.table("./UCI HAR Dataset/test/y_test.txt")
train_subject       <- read.table("./UCI HAR Dataset/train/subject_train.txt")
train_X             <- read.table("./UCI HAR Dataset/train/X_train.txt")
train_y             <- read.table("./UCI HAR Dataset/train/y_train.txt")
setwd("D:/DSToolbox/GetCleanData_CourseProject")
activity_labels       <- read.table("./UCI HAR Dataset/activity_labels.txt")
features              <- read.table("./UCI HAR Dataset/features.txt")
test_subject       <- read.table("./UCI HAR Dataset/test/subject_test.txt")
test_X             <- read.table("./UCI HAR Dataset/test/X_test.txt")
test_y             <- read.table("./UCI HAR Dataset/test/y_test.txt")
train_subject       <- read.table("./UCI HAR Dataset/train/subject_train.txt")
train_X             <- read.table("./UCI HAR Dataset/train/X_train.txt")
train_y             <- read.table("./UCI HAR Dataset/train/y_train.txt")
##      1.1. First, merging all relevant test data together
names(test_X) <- c(make.names(features[,2], unique = TRUE))
test_y <- merge(test_y, activity_labels, by.x = "V1", by.y = "V1")
names(test_y) <- c("activity_number","activity_label")
names(test_subject) <- c("subject")
test_X <- cbind(test_subject, test_y, test_X)
##      1.2. Second, merging all relevant train data together
names(train_X) <- c(make.names(features[,2], unique = TRUE))
train_y <- merge(train_y, activity_labels, by.x = "V1", by.y = "V1")
names(train_y) <- c("activity_number","activity_label")
names(train_subject) <- c("subject")
train_X <- cbind(train_subject, train_y, train_X)
names(train_X)
merged <- rbind(test_X, train_X)
head(merged,3)
#  Q1. Merges the training and the test sets to create one data set.
##      ------------------------------------------------------
##      1.2. First, merging all relevant test data together
##      ------------------------------------------------------
#       Q3. Uses descriptive activity names to name the activities in
#       the data set
#       Q4. Appropriately labels the data set with descriptive variable names.
#       Labelling data set with descriptive variable (features) names
names(test_X) <- c(make.names(features[,2], unique = TRUE))
#       Merging activities ID's with corresponding names and changing column
#       names for better usability
test_y <- merge(test_y, activity_labels, by.x = "V1", by.y = "V1")
names(test_y) <- c("activity_number","activity_label")
#       Changing the name of the column for subjects
names(test_subject) <- c("subject")
#       Merging together test data - subjects, activity names and measurements
test_X <- cbind(test_subject, test_y, test_X)
##      Q3, Q4 - done
##      ------------------------------------------------------
##      1.2. Second, merging all relevant train data together
##      ------------------------------------------------------
#       Q3. Uses descriptive activity names to name the activities in
#       the data set
#       Q4. Appropriately labels the data set with descriptive variable names.
#       Labelling data set with descriptive variable (features) names
names(train_X) <- c(make.names(features[,2], unique = TRUE))
#       Merging activities ID's with corresponding names and changing column
#       names for better usability
train_y <- merge(train_y, activity_labels, by.x = "V1", by.y = "V1")
names(train_y) <- c("activity_number","activity_label")
#       Changing the name of the column for subjects
names(train_subject) <- c("subject")
#       Merging together train data - subjects, activity names and measurements
train_X <- cbind(train_subject, train_y, train_X)
##      Q3, Q4 - done
#       Merging together test and train data -> Q1.
merged <- rbind(test_X, train_X)
## ------------------------------------------------------------------------
## -----_______________  Q1, Q3, Q4 - DONE --------------------------------
## ------------------------------------------------------------------------
#  ------------------------------------------------------------------------
#  Q2. Extracts only the measurements on the mean and standard deviation
#       for each measurement.
# -------------------------------------------------------------------------
# Getting only the features list for the measurements on the mean and
# standard deviation for each measurement. To do so, we apply grep() to find
# features names, which have "mean", "Mean" or "std" substrings.
# find the features wiht required substrings. Result - boolean vector
rows_to_select <- c(grep("mean", features$V2), grep("Mean", features$V2),grep("std", features$V2),grep("Std", features$V2))
# getting only features names for means and std
col_mean_std <- features[rows_to_select,"V2"]
# transform into names format, as it's done for the test_X above
col_mean_std <- make.names(col_mean_std)
head(merged[,col_mean_std],2)
dim(merged[,col_mean_std])
dim(merged[,col_mean_std],Mb)
length(merged[,1])
aggregate(merged, by =c("subject", "activity_number"), FUN = mean)
aggregate(merged, by = list(subject = merged$subject, activity_number = merged$activity_number), FUN = mean)
tiny_data <- aggregate(merged, by = list(subject = merged$subject, activity_number = merged$activity_number), FUN = mean)
unique(merged$subject, merged$activity_number)
unique(merged[,c("subject", "activity_number")])
unique(merged[,c("subject", "activity_number","activity_name")])
unique(merged[,c("subject", "activity_number","activity_label")])
unique(order(merged[,c("subject", "activity_number","activity_label")]))
order(unique(merged[,c("subject", "activity_number","activity_label")]))
sort.list(unique(merged[,c("subject", "activity_number","activity_label")]))
unique(merged[,c("subject", "activity_number","activity_label")])
tiny_data[1,]
names(tiny_data)
activity_labels       <- read.table("./UCI HAR Dataset/activity_labels.txt")
features              <- read.table("./UCI HAR Dataset/features.txt")
test_subject       <- read.table("./UCI HAR Dataset/test/subject_test.txt")
test_X             <- read.table("./UCI HAR Dataset/test/X_test.txt")
test_y             <- read.table("./UCI HAR Dataset/test/y_test.txt")
train_subject       <- read.table("./UCI HAR Dataset/train/subject_train.txt")
train_X             <- read.table("./UCI HAR Dataset/train/X_train.txt")
train_y             <- read.table("./UCI HAR Dataset/train/y_train.txt")
#  Q1. Merges the training and the test sets to create one data set.
##      ------------------------------------------------------
##      1.2. First, merging all relevant test data together
##      ------------------------------------------------------
#       Q3. Uses descriptive activity names to name the activities in
#       the data set
#       Q4. Appropriately labels the data set with descriptive variable names.
#       Labelling data set with descriptive variable (features) names
names(test_X) <- c(make.names(features[,2], unique = TRUE))
#       Merging activities ID's with corresponding names and changing column
#       names for better usability
test_y <- merge(test_y, activity_labels, by.x = "V1", by.y = "V1")
names(test_y) <- c("activity_number","activity_label")
#       Changing the name of the column for subjects
names(test_subject) <- c("subject")
#       Merging together test data - subjects, activity names and measurements
test_X <- cbind(test_subject, test_y, test_X)
##      Q3, Q4 - done
##      ------------------------------------------------------
##      1.2. Second, merging all relevant train data together
##      ------------------------------------------------------
#       Q3. Uses descriptive activity names to name the activities in
#       the data set
#       Q4. Appropriately labels the data set with descriptive variable names.
#       Labelling data set with descriptive variable (features) names
names(train_X) <- c(make.names(features[,2], unique = TRUE))
#       Merging activities ID's with corresponding names and changing column
#       names for better usability
train_y <- merge(train_y, activity_labels, by.x = "V1", by.y = "V1")
names(train_y) <- c("activity_number","activity_label")
#       Changing the name of the column for subjects
names(train_subject) <- c("subject")
#       Merging together train data - subjects, activity names and measurements
train_X <- cbind(train_subject, train_y, train_X)
##      Q3, Q4 - done
#       Merging together test and train data -> Q1.
merged <- rbind(test_X, train_X)
## ------------------------------------------------------------------------
## -----_______________  Q1, Q3, Q4 - DONE --------------------------------
## ------------------------------------------------------------------------
#  ------------------------------------------------------------------------
#  Q2. Extracts only the measurements on the mean and standard deviation
#       for each measurement.
# -------------------------------------------------------------------------
# Getting only the features list for the measurements on the mean and
# standard deviation for each measurement. To do so, we apply grep() to find
# features names, which have "mean", "Mean" or "std" substrings.
# find the features wiht required substrings. Result - boolean vector
rows_to_select <- c(grep("mean", features$V2), grep("Mean", features$V2),grep("std", features$V2),grep("Std", features$V2))
# getting only features names for means and std
col_mean_std <- features[rows_to_select,"V2"]
# transform into names format, as it's done for the test_X above
col_mean_std <- make.names(col_mean_std)
#  COMMENT: We get only the names of features, related to mean and std
#  measurements, but in the order, which is not the same, as they are
#  listed in the features list or names(test_X), which might be ok for
#  the analyst, who is looking and analyzing by variables' names
# getting a data set with only required measurements on mean and
# standard deviation for each measurement
merged <- merged[,col_mean_std]
names(merged)
col_mean_std <- make.names(c("subject","activity_number","activity_label",col_mean_std))
merged <- merged[,col_mean_std]
merged <- rbind(test_X, train_X)
## ------------------------------------------------------------------------
## -----_______________  Q1, Q3, Q4 - DONE --------------------------------
## ------------------------------------------------------------------------
#  ------------------------------------------------------------------------
#  Q2. Extracts only the measurements on the mean and standard deviation
#       for each measurement.
# -------------------------------------------------------------------------
# Getting only the features list for the measurements on the mean and
# standard deviation for each measurement. To do so, we apply grep() to find
# features names, which have "mean", "Mean" or "std" substrings.
# find the features wiht required substrings. Result - boolean vector
rows_to_select <- c(grep("mean", features$V2), grep("Mean", features$V2),grep("std", features$V2),grep("Std", features$V2))
# getting only features names for means and std
col_mean_std <- features[rows_to_select,"V2"]
# transform into names format, as it's done for the test_X above
col_mean_std <- make.names(c("subject","activity_number","activity_label",col_mean_std))
#  COMMENT: We get only the names of features, related to mean and std
#  measurements, but in the order, which is not the same, as they are
#  listed in the features list or names(test_X), which might be ok for
#  the analyst, who is looking and analyzing by variables' names
# getting a data set with only required measurements on mean and
# standard deviation for each measurement
merged <- merged[,col_mean_std]
merged <- rbind(test_X, train_X)
## ------------------------------------------------------------------------
## -----_______________  Q1, Q3, Q4 - DONE --------------------------------
## ------------------------------------------------------------------------
#  ------------------------------------------------------------------------
#  Q2. Extracts only the measurements on the mean and standard deviation
#       for each measurement.
# -------------------------------------------------------------------------
# Getting only the features list for the measurements on the mean and
# standard deviation for each measurement. To do so, we apply grep() to find
# features names, which have "mean", "Mean" or "std" substrings.
# find the features wiht required substrings. Result - boolean vector
rows_to_select <- c(grep("mean", features$V2), grep("Mean", features$V2),grep("std", features$V2),grep("Std", features$V2))
# getting only features names for means and std
col_mean_std <- features[rows_to_select,"V2"]
# transform into names format, as it's done for the test_X above
col_mean_std <- make.names(col_mean_std))
#  COMMENT: We get only the names of features, related to mean and std
#  measurements, but in the order, which is not the same, as they are
#  listed in the features list or names(test_X), which might be ok for
#  the analyst, who is looking and analyzing by variables' names
# getting a data set with only required measurements on mean and
# standard deviation for each measurement
merged <- merged[,c("subject","activity_number","activity_label",col_mean_std)]
names(merged)
names(merged[,c("subject","activity_number","activity_label", col_mean_std)])
head(col_mean_std,2)
rows_to_select <- c(grep("mean", features$V2), grep("Mean", features$V2),grep("std", features$V2),grep("Std", features$V2))
# getting only features names for means and std
col_mean_std <- features[rows_to_select,"V2"]
# transform into names format, as it's done for the test_X above
col_mean_std <- make.names(col_mean_std)
names(merged[,c("subject","activity_number","activity_label", col_mean_std)])
merged <- merged[,c("subject","activity_number","activity_label", col_mean_std)]
names(merged)
tiny_data <- aggregate(merged, by = list(subject = merged$subject, activity_number = merged$activity_number), FUN = mean)
warnings()
tiny_data <- aggregate(merged, by = list(subject = merged$subject, activity_number = merged$activity_number), FUN = mean, na.action = na.omit)
names(tiny_data)
any(is.na(merged[4,]))
any(is.na(merged[5,]))
any(is.na(merged[6,]))
any(is.na(merged[7,]))
any(is.na(merged[8,]))
any(is.na(merged[1:91,]))
tiny_data[1,]
names(tiny_data)
aggregate(merged[,4], by = list(subject = merged$subject, activity_number = merged$activity_number), FUN = mean, na.action = na.omit)
aggregate(merged[,4], by = list(subject = merged$subject, activity_label = merged$activity_label), FUN = mean, na.action = na.omit)
t1 <- aggregate(merged[,4], by = list(subject = merged$subject, activity_label = merged$activity_label), FUN = mean, na.action = na.omit)
t2 <- aggregate(merged[,5], by = list(subject = merged$subject, activity_label = merged$activity_label), FUN = mean, na.action = na.omit)
t1
t2
names(t1) <- c("subject", "activity_label", "X1")
names(t2) <- c("subject", "activity_label", "X2")
t2
t1
intersect(names(t1),names(t2))
merge(t1, t2, by = intersect(names(t1),names(t2)))
activity_labels       <- read.table("./UCI HAR Dataset/activity_labels.txt")
features              <- read.table("./UCI HAR Dataset/features.txt")
test_subject       <- read.table("./UCI HAR Dataset/test/subject_test.txt")
test_X             <- read.table("./UCI HAR Dataset/test/X_test.txt")
test_y             <- read.table("./UCI HAR Dataset/test/y_test.txt")
train_subject       <- read.table("./UCI HAR Dataset/train/subject_train.txt")
train_X             <- read.table("./UCI HAR Dataset/train/X_train.txt")
train_y             <- read.table("./UCI HAR Dataset/train/y_train.txt")
names(test_X) <- c(make.names(features[,2], unique = TRUE))
#       Merging activities ID's with corresponding names and changing column
#       names for better usability
test_y <- merge(test_y, activity_labels, by.x = "V1", by.y = "V1")
names(test_y) <- c("activity_number","activity_label")
#       Changing the name of the column for subjects
names(test_subject) <- c("subject")
#       Merging together test data - subjects, activity names and measurements
test_X <- cbind(test_subject, test_y$activity_label, test_X)
names(test_X)
names(test_X) <- c(make.names(features[,2], unique = TRUE))
#       Merging activities ID's with corresponding names and changing column
#       names for better usability
test_y <- merge(test_y, activity_labels, by.x = "V1", by.y = "V1")
names(test_y) <- c("activity_number","activity_label")
#       Changing the name of the column for subjects
names(test_subject) <- c("subject")
#       Merging together test data - subjects, activity names and measurements
test_X <- cbind(test_subject, test_y, test_X)
names(train_X) <- c(make.names(features[,2], unique = TRUE))
#       Merging activities ID's with corresponding names and changing column
#       names for better usability
train_y <- merge(train_y, activity_labels, by.x = "V1", by.y = "V1")
names(train_y) <- c("activity_number","activity_label")
#       Changing the name of the column for subjects
names(train_subject) <- c("subject")
#       Merging together train data - subjects, activity names and measurements
train_X <- cbind(train_subject, train_y, train_X)
##      Q3, Q4 - done
#       Merging together test and train data -> Q1.
merged <- rbind(test_X, train_X)
activity_labels       <- read.table("./UCI HAR Dataset/activity_labels.txt")
features              <- read.table("./UCI HAR Dataset/features.txt")
test_subject       <- read.table("./UCI HAR Dataset/test/subject_test.txt")
test_X             <- read.table("./UCI HAR Dataset/test/X_test.txt")
test_y             <- read.table("./UCI HAR Dataset/test/y_test.txt")
train_subject       <- read.table("./UCI HAR Dataset/train/subject_train.txt")
train_X             <- read.table("./UCI HAR Dataset/train/X_train.txt")
train_y             <- read.table("./UCI HAR Dataset/train/y_train.txt")
#  Q1. Merges the training and the test sets to create one data set.
##      ------------------------------------------------------
##      1.2. First, merging all relevant test data together
##      ------------------------------------------------------
#       Q3. Uses descriptive activity names to name the activities in
#       the data set
#       Q4. Appropriately labels the data set with descriptive variable names.
#       Labelling data set with descriptive variable (features) names
names(test_X) <- c(make.names(features[,2], unique = TRUE))
#       Merging activities ID's with corresponding names and changing column
#       names for better usability
test_y <- merge(test_y, activity_labels, by.x = "V1", by.y = "V1")
names(test_y) <- c("activity_number","activity_label")
#       Changing the name of the column for subjects
names(test_subject) <- c("subject")
#       Merging together test data - subjects, activity names and measurements
test_X <- cbind(test_subject, test_y, test_X)
##      Q3, Q4 - done
##      ------------------------------------------------------
##      1.2. Second, merging all relevant train data together
##      ------------------------------------------------------
#       Q3. Uses descriptive activity names to name the activities in
#       the data set
#       Q4. Appropriately labels the data set with descriptive variable names.
#       Labelling data set with descriptive variable (features) names
names(train_X) <- c(make.names(features[,2], unique = TRUE))
#       Merging activities ID's with corresponding names and changing column
#       names for better usability
train_y <- merge(train_y, activity_labels, by.x = "V1", by.y = "V1")
names(train_y) <- c("activity_number","activity_label")
#       Changing the name of the column for subjects
names(train_subject) <- c("subject")
#       Merging together train data - subjects, activity names and measurements
train_X <- cbind(train_subject, train_y, train_X)
##      Q3, Q4 - done
#       Merging together test and train data -> Q1.
merged <- rbind(test_X, train_X)
## ------------------------------------------------------------------------
## -----_______________  Q1, Q3, Q4 - DONE --------------------------------
## ------------------------------------------------------------------------
#  ------------------------------------------------------------------------
#  Q2. Extracts only the measurements on the mean and standard deviation
#       for each measurement.
# -------------------------------------------------------------------------
# Getting only the features list for the measurements on the mean and
# standard deviation for each measurement. To do so, we apply grep() to find
# features names, which have "mean", "Mean" or "std" substrings.
# find the features wiht required substrings. Result - boolean vector
rows_to_select <- c(grep("mean", features$V2), grep("Mean", features$V2),grep("std", features$V2),grep("Std", features$V2))
# getting only features names for means and std
col_mean_std <- features[rows_to_select,"V2"]
# transform into names format, as it's done for the test_X above
col_mean_std <- make.names(col_mean_std)
#  COMMENT: We get only the names of features, related to mean and std
#  measurements, but in the order, which is not the same, as they are
#  listed in the features list or names(test_X), which might be ok for
#  the analyst, who is looking and analyzing by variables' names
# getting a data set with only required measurements on mean and
# standard deviation for each measurement
merged <- merged[,c("subject","activity_number","activity_label", col_mean_std)]
tiny_data <- aggregate(merged[,4], by = list(subject = merged$subject, activity_number = merged$activity_number, activity_label = merged$activity_label), FUN = mean, na.action = na.omit)
names(tiny_data)[4]
names(merged[,4])
names(merged[4])
names(tiny_data)[4] <- names(merged[4])
names(tiny_data)[4]
length(names(merged))
N <- length(names(merged))-4
N
names(merged[N+4])
names(merged[89])
tiny_data <- aggregate(merged[,4], by = list(subject = merged$subject, activity_number = merged$activity_number, activity_label = merged$activity_label), FUN = mean, na.action = na.omit)
names(tiny_data)[4] <- names(merged[4])
N <- length(names(merged))-4
for(i in 1:N){
agg <- (merged[,i+4], by = list(subject = merged$subject, activity_number = merged$activity_number, activity_label = merged$activity_label), FUN = mean, na.action = na.omit)
tiny_data <- merge(tiny_data, agg, by = intersect(names(tiny_data),names(agg)))
names(tiny_data)[i+4] <- names(merged[i+4])
}
for(i in 1:N){
agg <- aggregate(merged[,i+4], by = list(subject = merged$subject, activity_number = merged$activity_number, activity_label = merged$activity_label), FUN = mean, na.action = na.omit)
tiny_data <- merge(tiny_data, agg, by = intersect(names(tiny_data),names(agg)))
names(tiny_data)[i+4] <- names(merged[i+4])
}
head(tiny_data,3)
names(tiny_data)
# Writing the final tiny data set into file
write.table(tiny_data, "tiny_data.txt")
tiny_data(tail,5)
tail(tiny_data,5)
